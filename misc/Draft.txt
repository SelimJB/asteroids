Hyperparameter Selection
https://medium.freecodecamp.org/how-to-pick-the-best-learning-rate-for-your-machine-learning-project-9c28865039a8

Biases and Seeds

Generating the Inputs File
- Standardize recordings
- Remove errors


! Different recording modes:
- "Efficacy evaluator" record mode
- "Input collector" record mode


The Backlog.todo file:
    Created so I could work on the project even when I only had 15 minutes available,
    to quickly get back into the flow and not have to think or decide what to do during a short session,
    allowing me to focus more on execution rather than planning.


TRAINING
Recording 1:
    Recording:
        A random session
    Results:
        The ship dodges asteroids but dies too often for my taste,
        it uses reverse too much
    Issues:
        * Too many deaths in the recording
        * Excessive use of reverse

IMPROVEMENT: Logging
    After each crash, the 30 frames before and after are deleted

Recordings to test:
    * Many asteroids
        - Remove zero-movement moments or not
    * Few asteroids
        - Mobile or not
        - Remove zero-movement moments or not


Subproject
Python Embedding
    * Write an explanatory README / entry point
    * Copy the folder into C++ / Misc
IN PARALLEL
    * Write a README to explain how to get started with the project


END OF PROJECT
    * How to reduce GPU performance usage?
    * Clean code
    * Write the Readme.md
    * Push sources and .exe

PROJECT README
Launching the project for the first time
    1- The main project is named ateroids
    2- To launch it, choose:
        - with the makefile: "mingw32-make all"
        - via command line:
            "g++  -g -o Main   ./obj/ship.o  ./obj/helper.o  ./obj/bullet.o  ./obj/Main.o  ./obj/ast.o  ./obj/gameobject.o -Llib -w -lmingw32 -lSDL2main -lSDL2"
        - launch the task: "Build and run main asteroid project"
Used libraries
    * SDL2
    * Mingw32
    * gfxlibrary

TODO README:
    * Dependency tree for third-party libraries used


Things learned:
Architecture:
    - SINGLETON VS Dependency Injection